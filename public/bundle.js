(()=>{var e={266:(e,t,r)=>{"use strict";function a(e,t){var r=figma.createFrame();return r.resize(e,t),r}function i(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"NONE",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"CENTER",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"CENTER";e.layoutMode=t,e.primaryAxisAlignItems=r,e.counterAxisAlignItems=a,e.layoutAlign="STRETCH"}function o(e,t,r){switch(r){case"center":e.x=(t.width-e.width)/2,e.y=(t.height-e.height)/2;break;case"left":e.x=0;break;case"right":e.x=t.width-e.width}t.appendChild}r.r(t),r.d(t,{align:()=>o,createFrame:()=>a,createFrameWithAutoLayout:()=>i})}},t={};function r(a){var i=t[a];if(void 0!==i)return i.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,r),o.exports}r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e=r(266),t=e.createFrame,a=e.createFrameWithAutoLayout,i=e.align;figma.showUI(__html__,{width:420,height:840});var o={};figma.ui.onmessage=function(e){if("submit"===e.type)try{(r=e.data).forEach((function(e){if("createFrame"===e.action){var r=t(parseFloat(e.width)||0,parseFloat(e.height)||0);e.parentId&&o[e.parentId]?o[e.parentId].appendChild(r):figma.currentPage.appendChild(r),o[e.id]=r}})),r.forEach((function(e){if("align"===e.action||"createFrameWithAutoLayout"===e.action){var t=o[e.id];if(!t)return;if("createFrameWithAutoLayout"===e.action&&a(t,e.layoutMode,e.primaryAxisAlignItems,e.counterAxisAlignItems),e.parentId&&o[e.parentId]){var r=o[e.parentId];i(t,r,e.alignment)}}}))}catch(e){console.error("Error processing commands:",e),figma.ui.postMessage({type:"error",text:"Error processing commands. Please check the format of your input."})}var r}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,