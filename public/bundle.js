(()=>{var e={732:()=>{}},i={};function t(a){var r=i[a];if(void 0!==r)return r.exports;var n=i[a]={exports:{}};return e[a](n,n.exports,t),n.exports}(()=>{"use strict";var e=t(732),i={},a=function(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;i[e]=t,a&&i[a]?i[a].appendChild(t):figma.currentPage.appendChild(t)};figma.showUI(__html__,{width:420,height:840}),figma.ui.onmessage=function(t){if("submit"===t.type)try{t.data.forEach((function(t){var r,n;switch(t.action){case"createFrame":(r=figma.createFrame()).resize(parseFloat(t.width),parseFloat(t.height)),a(t.id,r,t.parentId);break;case"createRectangle":r=(0,e.createRectangle)(parseFloat(t.width),parseFloat(t.height)),a(t.id,r);break;case"applyAutoLayout":n=t.id,function(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"NONE",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"CENTER",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"CENTER",r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"AUTO",n=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"AUTO";switch(e.layoutMode=i,e.primaryAxisSizingMode=r,e.counterAxisSizingMode=n,e.layoutAlign="STRETCH",i){case"HORIZONTAL":e.primaryAxisAlignItems=t,e.counterAxisAlignItems=a,e.itemSpacing=10;break;case"VERTICAL":e.primaryAxisAlignItems=a,e.counterAxisAlignItems=t,e.itemSpacing=10}}(r=i[n],t.layoutMode,t.alignX,t.alignY,t.primaryAxisSizingMode,t.counterAxisSizingMode);break;case"globalAlign":!function(e,t,a,r){var n=i[e],o=i[t];if(n&&o){switch(a){case"Align Left":n.x=o.x;break;case"Align horizontal centers":n.x=o.x+(o.width-n.width)/2;break;case"Align right":n.x=o.x+o.width-n.width}switch(r){case"Align top":n.y=o.y;break;case"Align vertical centers":n.y=o.y+(o.height-n.height)/2;break;case"Align bottom":n.y=o.y+o.height-n.height}}}(t.childId,t.parentId,t.horizontalAlign,t.verticalAlign)}}))}catch(e){console.error("Error processing commands:",e),figma.ui.postMessage({type:"error",text:"Error processing commands. Please check the format of your input."})}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,