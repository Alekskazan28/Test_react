(()=>{"use strict";var e={},a=function(a,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;e[a]=t,r&&e[r]?e[r].appendChild(t):figma.currentPage.appendChild(t)};figma.showUI(__html__,{width:420,height:840}),figma.ui.onmessage=function(t){if("submit"===t.type)try{t.data.forEach((function(t){var r,i,o,c,s;switch(t.action){case"createFrame":(r=figma.createFrame()).resize(parseFloat(t.width),parseFloat(t.height)),t.id&&a(t.id,r,t.parentId);break;case"createRectangle":o=parseFloat(t.width),c=parseFloat(t.height),(s=figma.createRectangle()).resize(o,c),s.fills=[{type:"SOLID",color:{r:.5,g:.5,b:.5}}],r=s,t.id&&a(t.id,r);break;case"applyAutoLayout":i=t.id,(r=e[i])&&t.layoutMode&&function(e){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"NONE";e.layoutMode=a,e.layoutAlign="STRETCH"}(r,t.layoutMode)}}))}catch(e){console.error("Error processing commands:",e),figma.ui.postMessage({type:"error",text:"Error processing commands. Please check the format of your input."})}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFDTyxJQUFNQSxFQUFhLENBQUMsRUFFZEMsRUFBVyxTQUFDQyxFQUFJQyxHQUEyQixJQUFwQkMsRUFBUUMsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBRyxLQUM3Q0wsRUFBV0UsR0FBTUMsRUFDYkMsR0FBWUosRUFBV0ksR0FDekJKLEVBQVdJLEdBQVVJLFlBQVlMLEdBRWpDTSxNQUFNQyxZQUFZRixZQUFZTCxFQUVsQyxFQ05BTSxNQUFNRSxPQUFPQyxTQUFVLENBQUVDLE1BQU8sSUFBS0MsT0FBUSxNQUU3Q0wsTUFBTU0sR0FBR0MsVUFBWSxTQUFBQyxHQUNuQixHQUFpQixXQUFiQSxFQUFJQyxLQUNOLElBQ21CRCxFQUFJRSxLQVVoQkMsU0FBUSxTQUFBQyxHQUNmLElBQUlDLEVEUnFCcEIsRUVWR1csRUFBT0MsRUFDL0JTLEVEa0JKLE9BQVFGLEVBQVFHLFFBQ2QsSUFBSyxlQUNIRixFQUFVYixNQUFNZ0IsZUFDUkMsT0FBT0MsV0FBV04sRUFBUVIsT0FBUWMsV0FBV04sRUFBUVAsU0FDekRPLEVBQVFuQixJQUNWRCxFQUFTb0IsRUFBUW5CLEdBQUlvQixFQUFTRCxFQUFRakIsVUFFeEMsTUFDRixJQUFLLGtCQzNCcUJTLEVENEJFYyxXQUFXTixFQUFRUixPQzVCZEMsRUQ0QnNCYSxXQUFXTixFQUFRUCxTQzNCeEVTLEVBQVlkLE1BQU1tQixtQkFDZEYsT0FBT2IsRUFBT0MsR0FDeEJTLEVBQVVNLE1BQVEsQ0FBQyxDQUFFWCxLQUFNLFFBQVNZLE1BQU8sQ0FBRUMsRUFBRyxHQUFLQyxFQUFHLEdBQUtDLEVBQUcsTUR5QjFEWCxFQ3hCQ0MsRUR5QkdGLEVBQVFuQixJQUNWRCxFQUFTb0IsRUFBUW5CLEdBQUlvQixHQUV2QixNQUNGLElBQUssa0JEdkJrQnBCLEVDd0JFbUIsRUFBUW5CLElBQS9Cb0IsRUR4QjRCdEIsRUFBV0UsS0N5QnhCbUIsRUFBUWEsWUVwQ3hCLFNBQW1DL0IsR0FBNEIsSUFBckIrQixFQUFVN0IsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBRyxPQUM1REYsRUFBTStCLFdBQWFBLEVBQ25CL0IsRUFBTWdDLFlBQWMsU0FDdEIsQ0ZrQ1VDLENBQTBCZCxFQUFTRCxFQUFRYSxZQUluRCxHQS9CRSxDQUFFLE1BQU9HLEdBQ1BDLFFBQVFELE1BQU0sNkJBQThCQSxHQUM1QzVCLE1BQU1NLEdBQUd3QixZQUFZLENBQUVyQixLQUFNLFFBQVNzQixLQUFNLHFFQUM5QyxDQUVKLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXN0LXBsdWdpbi8uL3NyYy91dGlscy9zdGF0ZU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdC1wbHVnaW4vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVzdC1wbHVnaW4vLi9zcmMvdXRpbHMvc2hhcGVVdGlscy5qcyIsIndlYnBhY2s6Ly90ZXN0LXBsdWdpbi8uL3NyYy91dGlscy9hdXRvTGF5b3V0VXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzL3N0YXRlTWFuYWdlci5qc1xyXG5leHBvcnQgY29uc3QgZnJhbWVzQnlJZCA9IHt9O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZEZyYW1lID0gKGlkLCBmcmFtZSwgcGFyZW50SWQgPSBudWxsKSA9PiB7XHJcbiAgZnJhbWVzQnlJZFtpZF0gPSBmcmFtZTtcclxuICBpZiAocGFyZW50SWQgJiYgZnJhbWVzQnlJZFtwYXJlbnRJZF0pIHtcclxuICAgIGZyYW1lc0J5SWRbcGFyZW50SWRdLmFwcGVuZENoaWxkKGZyYW1lKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZmlnbWEuY3VycmVudFBhZ2UuYXBwZW5kQ2hpbGQoZnJhbWUpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRGcmFtZUJ5SWQgPSAoaWQpID0+IGZyYW1lc0J5SWRbaWRdO1xyXG4iLCJpbXBvcnQgeyBjcmVhdGVSZWN0YW5nbGUgfSBmcm9tICcuL3V0aWxzL3NoYXBlVXRpbHMnO1xyXG5pbXBvcnQgeyBjcmVhdGVGcmFtZVdpdGhBdXRvTGF5b3V0IH0gZnJvbSAnLi91dGlscy9hdXRvTGF5b3V0VXRpbHMnO1xyXG5pbXBvcnQgeyBhZGRGcmFtZSwgZ2V0RnJhbWVCeUlkIH0gZnJvbSAnLi91dGlscy9zdGF0ZU1hbmFnZXInO1xyXG5cclxuZmlnbWEuc2hvd1VJKF9faHRtbF9fLCB7IHdpZHRoOiA0MjAsIGhlaWdodDogODQwIH0pO1xyXG5cclxuZmlnbWEudWkub25tZXNzYWdlID0gbXNnID0+IHtcclxuICBpZiAobXNnLnR5cGUgPT09ICdzdWJtaXQnKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjb21tYW5kcyA9IG1zZy5kYXRhO1xyXG4gICAgICBwcm9jZXNzQ29tbWFuZHMoY29tbWFuZHMpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHByb2Nlc3NpbmcgY29tbWFuZHM6XCIsIGVycm9yKTtcclxuICAgICAgZmlnbWEudWkucG9zdE1lc3NhZ2UoeyB0eXBlOiAnZXJyb3InLCB0ZXh0OiAnRXJyb3IgcHJvY2Vzc2luZyBjb21tYW5kcy4gUGxlYXNlIGNoZWNrIHRoZSBmb3JtYXQgb2YgeW91ciBpbnB1dC4nIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NDb21tYW5kcyhjb21tYW5kcykge1xyXG4gIGNvbW1hbmRzLmZvckVhY2goY29tbWFuZCA9PiB7XHJcbiAgICBsZXQgZWxlbWVudDtcclxuICAgIHN3aXRjaCAoY29tbWFuZC5hY3Rpb24pIHtcclxuICAgICAgY2FzZSBcImNyZWF0ZUZyYW1lXCI6XHJcbiAgICAgICAgZWxlbWVudCA9IGZpZ21hLmNyZWF0ZUZyYW1lKCk7XHJcbiAgICAgICAgZWxlbWVudC5yZXNpemUocGFyc2VGbG9hdChjb21tYW5kLndpZHRoKSwgcGFyc2VGbG9hdChjb21tYW5kLmhlaWdodCkpO1xyXG4gICAgICAgIGlmIChjb21tYW5kLmlkKSB7XHJcbiAgICAgICAgICBhZGRGcmFtZShjb21tYW5kLmlkLCBlbGVtZW50LCBjb21tYW5kLnBhcmVudElkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgXCJjcmVhdGVSZWN0YW5nbGVcIjpcclxuICAgICAgICBlbGVtZW50ID0gY3JlYXRlUmVjdGFuZ2xlKHBhcnNlRmxvYXQoY29tbWFuZC53aWR0aCksIHBhcnNlRmxvYXQoY29tbWFuZC5oZWlnaHQpKTtcclxuICAgICAgICBpZiAoY29tbWFuZC5pZCkge1xyXG4gICAgICAgICAgYWRkRnJhbWUoY29tbWFuZC5pZCwgZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiYXBwbHlBdXRvTGF5b3V0XCI6IC8vINCd0L7QstGL0LkgY2FzZSDQtNC70Y8g0L7QsdGA0LDQsdC+0YLQutC4INC/0YDQuNC80LXQvdC10L3QuNGPINCw0LLRgtC+0LvQsNC50LDRg9GC0LBcclxuICAgICAgICBlbGVtZW50ID0gZ2V0RnJhbWVCeUlkKGNvbW1hbmQuaWQpO1xyXG4gICAgICAgIGlmIChlbGVtZW50ICYmIGNvbW1hbmQubGF5b3V0TW9kZSkge1xyXG4gICAgICAgICAgY3JlYXRlRnJhbWVXaXRoQXV0b0xheW91dChlbGVtZW50LCBjb21tYW5kLmxheW91dE1vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9KTtcclxufSIsIi8vINCt0YLQvtGCINC80L7QtNGD0LvRjCDQvtGC0LLQtdGH0LDQtdGCINC30LAg0YHQvtC30LTQsNC90LjQtSDQs9C10L7QvNC10YLRgNC40YfQtdGB0LrQuNGFINGE0LjQs9GD0YBcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWN0YW5nbGUod2lkdGgsIGhlaWdodCkge1xyXG4gIGNvbnN0IHJlY3RhbmdsZSA9IGZpZ21hLmNyZWF0ZVJlY3RhbmdsZSgpO1xyXG4gIHJlY3RhbmdsZS5yZXNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgcmVjdGFuZ2xlLmZpbGxzID0gW3sgdHlwZTogJ1NPTElEJywgY29sb3I6IHsgcjogMC41LCBnOiAwLjUsIGI6IDAuNSB9IH1dOyAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQsdCw0LfQvtCy0YvQuSDRgdC10YDRi9C5INGG0LLQtdGCXHJcbiAgcmV0dXJuIHJlY3RhbmdsZTtcclxufVxyXG4iLCIvLyBzcmMvdXRpbHMvYXV0b0xheW91dFV0aWxzLmpzXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGcmFtZVdpdGhBdXRvTGF5b3V0KGZyYW1lLCBsYXlvdXRNb2RlID0gJ05PTkUnKSB7XHJcbiAgZnJhbWUubGF5b3V0TW9kZSA9IGxheW91dE1vZGU7XHJcbiAgZnJhbWUubGF5b3V0QWxpZ24gPSAnU1RSRVRDSCc7IC8vINCU0LXQu9Cw0LXQvCDRgtCw0LosINGH0YLQvtCx0Ysg0YTRgNC10LnQvCDQt9Cw0L3QuNC80LDQuyDQstGB0Y4g0LTQvtGB0YLRg9C/0L3Rg9GOINGI0LjRgNC40L3RgyDQsiDRgNC+0LTQuNGC0LXQu9C1XHJcbn0iXSwibmFtZXMiOlsiZnJhbWVzQnlJZCIsImFkZEZyYW1lIiwiaWQiLCJmcmFtZSIsInBhcmVudElkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiYXBwZW5kQ2hpbGQiLCJmaWdtYSIsImN1cnJlbnRQYWdlIiwic2hvd1VJIiwiX19odG1sX18iLCJ3aWR0aCIsImhlaWdodCIsInVpIiwib25tZXNzYWdlIiwibXNnIiwidHlwZSIsImRhdGEiLCJmb3JFYWNoIiwiY29tbWFuZCIsImVsZW1lbnQiLCJyZWN0YW5nbGUiLCJhY3Rpb24iLCJjcmVhdGVGcmFtZSIsInJlc2l6ZSIsInBhcnNlRmxvYXQiLCJjcmVhdGVSZWN0YW5nbGUiLCJmaWxscyIsImNvbG9yIiwiciIsImciLCJiIiwibGF5b3V0TW9kZSIsImxheW91dEFsaWduIiwiY3JlYXRlRnJhbWVXaXRoQXV0b0xheW91dCIsImVycm9yIiwiY29uc29sZSIsInBvc3RNZXNzYWdlIiwidGV4dCJdLCJzb3VyY2VSb290IjoiIn0=